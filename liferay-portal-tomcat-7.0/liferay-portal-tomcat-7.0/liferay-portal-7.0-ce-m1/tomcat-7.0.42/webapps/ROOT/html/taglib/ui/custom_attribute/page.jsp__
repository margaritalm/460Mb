 package PackageNo437669377;import _html_taglib_init_jsp;import com.liferay.portlet.expando.model.ExpandoColumnConstants;import com.liferay.portlet.expando.model.ExpandoTableConstants;import com.liferay.portlet.expando.service.permission.ExpandoColumnPermissionUtil;import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil; public class page_jsp {  public void Checkmarx_Class_Init(HttpServletRequest request, HttpServletResponse response, HttpSession session, ServletContext application, PageContext pageContext) {jspInit();















/* ?inc?c:\cxsrc\_LANGUAGES_\Java\500_1m\liferay-portal-tomcat-7.0\liferay-portal-7.0-ce-m1\tomcat-7.0.42\webapps\ROOT\html\taglib\ui\custom_attribute\page.jsp */ /* 17?c:\cxsrc\_LANGUAGES_\Java\500_1m\liferay-portal-tomcat-7.0\liferay-portal-7.0-ce-m1\tomcat-7.0.42\webapps\ROOT\html\taglib\ui\custom_attribute\page.jsp */ /* 1?inc?c:\cxsrc\_LANGUAGES_\Java\500_1m\liferay-portal-tomcat-7.0\liferay-portal-7.0-ce-m1\tomcat-7.0.42\webapps\ROOT\html\taglib\ui\custom_attribute\init.jsp */ /* 2?inc?c:\cxsrc\_LANGUAGES_\Java\500_1m\liferay-portal-tomcat-7.0\liferay-portal-7.0-ce-m1\tomcat-7.0.42\webapps\ROOT\html\taglib\ui\custom_attribute\init.jsp */ /* 3?inc?c:\cxsrc\_LANGUAGES_\Java\500_1m\liferay-portal-tomcat-7.0\liferay-portal-7.0-ce-m1\tomcat-7.0.42\webapps\ROOT\html\taglib\ui\custom_attribute\init.jsp */ /* 4?inc?c:\cxsrc\_LANGUAGES_\Java\500_1m\liferay-portal-tomcat-7.0\liferay-portal-7.0-ce-m1\tomcat-7.0.42\webapps\ROOT\html\taglib\ui\custom_attribute\init.jsp */ /* 5?inc?c:\cxsrc\_LANGUAGES_\Java\500_1m\liferay-portal-tomcat-7.0\liferay-portal-7.0-ce-m1\tomcat-7.0.42\webapps\ROOT\html\taglib\ui\custom_attribute\init.jsp */ /* 6?inc?c:\cxsrc\_LANGUAGES_\Java\500_1m\liferay-portal-tomcat-7.0\liferay-portal-7.0-ce-m1\tomcat-7.0.42\webapps\ROOT\html\taglib\ui\custom_attribute\init.jsp */ /* 7?inc?c:\cxsrc\_LANGUAGES_\Java\500_1m\liferay-portal-tomcat-7.0\liferay-portal-7.0-ce-m1\tomcat-7.0.42\webapps\ROOT\html\taglib\ui\custom_attribute\init.jsp */ /* 8?inc?c:\cxsrc\_LANGUAGES_\Java\500_1m\liferay-portal-tomcat-7.0\liferay-portal-7.0-ce-m1\tomcat-7.0.42\webapps\ROOT\html\taglib\ui\custom_attribute\init.jsp */ /* 9?inc?c:\cxsrc\_LANGUAGES_\Java\500_1m\liferay-portal-tomcat-7.0\liferay-portal-7.0-ce-m1\tomcat-7.0.42\webapps\ROOT\html\taglib\ui\custom_attribute\init.jsp */ /* 10?inc?c:\cxsrc\_LANGUAGES_\Java\500_1m\liferay-portal-tomcat-7.0\liferay-portal-7.0-ce-m1\tomcat-7.0.42\webapps\ROOT\html\taglib\ui\custom_attribute\init.jsp */ /* 11?inc?c:\cxsrc\_LANGUAGES_\Java\500_1m\liferay-portal-tomcat-7.0\liferay-portal-7.0-ce-m1\tomcat-7.0.42\webapps\ROOT\html\taglib\ui\custom_attribute\init.jsp */ /* 12?inc?c:\cxsrc\_LANGUAGES_\Java\500_1m\liferay-portal-tomcat-7.0\liferay-portal-7.0-ce-m1\tomcat-7.0.42\webapps\ROOT\html\taglib\ui\custom_attribute\init.jsp */ /* 13?inc?c:\cxsrc\_LANGUAGES_\Java\500_1m\liferay-portal-tomcat-7.0\liferay-portal-7.0-ce-m1\tomcat-7.0.42\webapps\ROOT\html\taglib\ui\custom_attribute\init.jsp */ /* 14?inc?c:\cxsrc\_LANGUAGES_\Java\500_1m\liferay-portal-tomcat-7.0\liferay-portal-7.0-ce-m1\tomcat-7.0.42\webapps\ROOT\html\taglib\ui\custom_attribute\init.jsp */ /* 15?inc?c:\cxsrc\_LANGUAGES_\Java\500_1m\liferay-portal-tomcat-7.0\liferay-portal-7.0-ce-m1\tomcat-7.0.42\webapps\ROOT\html\taglib\ui\custom_attribute\init.jsp */ /* 16?inc?c:\cxsrc\_LANGUAGES_\Java\500_1m\liferay-portal-tomcat-7.0\liferay-portal-7.0-ce-m1\tomcat-7.0.42\webapps\ROOT\html\taglib\ui\custom_attribute\init.jsp */ /* 17?inc?c:\cxsrc\_LANGUAGES_\Java\500_1m\liferay-portal-tomcat-7.0\liferay-portal-7.0-ce-m1\tomcat-7.0.42\webapps\ROOT\html\taglib\ui\custom_attribute\init.jsp */ /* 18?inc?c:\cxsrc\_LANGUAGES_\Java\500_1m\liferay-portal-tomcat-7.0\liferay-portal-7.0-ce-m1\tomcat-7.0.42\webapps\ROOT\html\taglib\ui\custom_attribute\init.jsp */ /* 19?inc?c:\cxsrc\_LANGUAGES_\Java\500_1m\liferay-portal-tomcat-7.0\liferay-portal-7.0-ce-m1\tomcat-7.0.42\webapps\ROOT\html\taglib\ui\custom_attribute\init.jsp */ /* 20?inc?c:\cxsrc\_LANGUAGES_\Java\500_1m\liferay-portal-tomcat-7.0\liferay-portal-7.0-ce-m1\tomcat-7.0.42\webapps\ROOT\html\taglib\ui\custom_attribute\init.jsp */ /* 21?inc?c:\cxsrc\_LANGUAGES_\Java\500_1m\liferay-portal-tomcat-7.0\liferay-portal-7.0-ce-m1\tomcat-7.0.42\webapps\ROOT\html\taglib\ui\custom_attribute\init.jsp */ /* 22?inc?c:\cxsrc\_LANGUAGES_\Java\500_1m\liferay-portal-tomcat-7.0\liferay-portal-7.0-ce-m1\tomcat-7.0.42\webapps\ROOT\html\taglib\ui\custom_attribute\init.jsp */ response.write(CxResponseWrite)+response.write(request.getAttribute("CxResponseWrite")); /* 17?c:\cxsrc\_LANGUAGES_\Java\500_1m\liferay-portal-tomcat-7.0\liferay-portal-7.0-ce-m1\tomcat-7.0.42\webapps\ROOT\html\taglib\ui\custom_attribute\page.jsp */

     
     String randomNamespace = PortalUtil.generateRandomKey(request, "taglib_ui_custom_attribute_page") + StringPool.UNDERLINE;
     
     String className = (String)request.getAttribute("liferay-ui:custom-attribute:className");
     long classPK = GetterUtil.getLong((String)request.getAttribute("liferay-ui:custom-attribute:classPK"));
     boolean editable = GetterUtil.getBoolean((String)request.getAttribute("liferay-ui:custom-attribute:editable"));
     boolean label = GetterUtil.getBoolean((String)request.getAttribute("liferay-ui:custom-attribute:label"));
     String name = (String)request.getAttribute("liferay-ui:custom-attribute:name");
     
     ExpandoBridge expandoBridge = ExpandoBridgeFactoryUtil.getExpandoBridge(company.getCompanyId(), className, classPK);
     



      
     	int type = expandoBridge.getAttributeType(name);
     	Serializable value = expandoBridge.getAttribute(name);
     	Serializable defaultValue = expandoBridge.getAttributeDefault(name);
     
     	UnicodeProperties properties = expandoBridge.getAttributeProperties(name);
     
     	boolean propertyHidden = GetterUtil.getBoolean(properties.get(ExpandoColumnConstants.PROPERTY_HIDDEN));
     	boolean propertyVisibleWithUpdatePermission = GetterUtil.getBoolean(properties.get(ExpandoColumnConstants.PROPERTY_VISIBLE_WITH_UPDATE_PERMISSION));
     	boolean propertySecret = GetterUtil.getBoolean(properties.getProperty(ExpandoColumnConstants.PROPERTY_SECRET));
     	int propertyHeight = GetterUtil.getInteger(properties.getProperty(ExpandoColumnConstants.PROPERTY_HEIGHT));
     	int propertyWidth = GetterUtil.getInteger(properties.getProperty(ExpandoColumnConstants.PROPERTY_WIDTH));
     	String propertyDisplayType = GetterUtil.getString(properties.getProperty(ExpandoColumnConstants.PROPERTY_DISPLAY_TYPE), ExpandoColumnConstants.PROPERTY_DISPLAY_TYPE_TEXT_BOX);
     
     	if (editable && propertyVisibleWithUpdatePermission) {
     		propertyHidden = !ExpandoColumnPermissionUtil.contains(
     			permissionChecker, company.getCompanyId(), className,
     			ExpandoTableConstants.DEFAULT_TABLE_NAME, name, ActionKeys.UPDATE);
     	}
     
     	String localizedName = LanguageUtil.get(request, name);
     
     	if (name.equals(localizedName)) {
     		localizedName = HtmlUtil.escape(TextFormatter.format(name, TextFormatter.J));
     	}
     
     	Format dateFormatDateTime = FastDateFormatFactoryUtil.getDateTime(locale, timeZone);
     	





response.write( label ? localizedName : StringPool.BLANK );
response.write(HtmlUtil.getEscapeAttribute(name));response.write(HtmlUtil.getEscapeAttribute(name));




    
     							Boolean curValue = (Boolean)value;
     
     							if (curValue == null) {
     								curValue = (Boolean)defaultValue;
     							}
     
     							curValue = ParamUtil.getBoolean(request, "ExpandoAttribute--" + name + "--", curValue);
     							

  response.write(randomNamespace)+response.write(request.getAttribute("randomNamespace"));response.write(HtmlUtil.getAUICompatibleId(name));response.write(HtmlUtil.getEscapeAttribute(name));
  response.write( curValue ? "selected" : "" );
  response.write( !curValue ? "selected" : "" );





  response.write(randomNamespace)+response.write(request.getAttribute("randomNamespace"));response.write(HtmlUtil.getAUICompatibleId(name));

     
     								Calendar valueDate = CalendarFactoryUtil.getCalendar(timeZone, locale);
     
     								if (value != null) {
     									valueDate.setTime((Date)value);
     								}
     								else if (defaultValue != null) {
     									valueDate.setTime((Date)defaultValue);
     								}
     								else {
     									valueDate.setTime(new Date());
     								}
     
     								String fieldParam = "ExpandoAttribute--" + name + "--";
     
     								int day = ParamUtil.getInteger(request, fieldParam + "Day", -1);
     
     								if ((day == -1) && (valueDate != null)) {
     									day = valueDate.get(Calendar.DATE);
     								}
     
     								int month = ParamUtil.getInteger(request, fieldParam + "Month", -1);
     
     								if ((month == -1) && (valueDate != null)) {
     									month = valueDate.get(Calendar.MONTH);
     								}
     
     								int year = ParamUtil.getInteger(request, fieldParam + "Year", -1);
     
     								if ((year == -1) && (valueDate != null)) {
     									year = valueDate.get(Calendar.YEAR);
     								}
     
     								int amPm = ParamUtil.getInteger(request, fieldParam + "AmPm", -1);
     
     								if ((amPm == -1) && (valueDate != null)) {
     									amPm = Calendar.AM;
     
     									if (DateUtil.isFormatAmPm(locale)) {
     										amPm = valueDate.get(Calendar.AM_PM);
     									}
     								}
     
     								int hour = ParamUtil.getInteger(request, fieldParam + "Hour", -1);
     
     								if ((hour == -1) && (valueDate != null)) {
     									hour = valueDate.get(Calendar.HOUR_OF_DAY);
     
     									if (DateUtil.isFormatAmPm(locale)) {
     										hour = valueDate.get(Calendar.HOUR);
     									}
     								}
     
     								int minute = ParamUtil.getInteger(request, fieldParam + "Minute", -1);
     
     								if ((minute == -1) && (valueDate != null)) {
     									minute = valueDate.get(Calendar.MINUTE);
     								}
     								


     response.write( fieldParam + "Day" );
     response.write( day );
     response.write( false )+response.write(request.getAttribute(" false "));
   response.write( valueDate.getFirstDayOfWeek() - 1 )+response.write(request.getAttribute(" valueDate").getFirstDayOfWeek() - 1 );
       response.write( fieldParam + "Month" );
       response.write( month );
 response.write( fieldParam + "Date" );
      response.write( fieldParam + "Year" );
      response.write( year );



      response.write( fieldParam + "AmPm" );
      response.write( amPm );
     response.write( false )+response.write(request.getAttribute(" false "));
      response.write( fieldParam + "Hour" );
      response.write( hour );
response.write( fieldParam + "Minute" );
response.write( minute );
 response.write( fieldParam + "Time" );









      
     									double[] curValue = (double[])value;
     
     									for (double curDefaultValue : (double[])defaultValue) {
     									



      
     									}
     									




      
     									double[] curValue = (double[])value;
     
     									for (double curDefaultValue : (double[])defaultValue) {
     									



      
     									}
     									



    response.write(HtmlUtil.getEscapeAttribute(name));

       
     										double[] curValue = (double[])value;
     
     										for (double curDefaultValue : (double[])defaultValue) {
     										

     response.write( ((curValue.length > 0) && ArrayUtil.contains(curValue, curDefaultValue)) ? "selected" : "" );response.write( curDefaultValue )+response.write(request.getAttribute(" curDefaultValue "));

       
     										}
     										





      
     									if (((double[])value).length == 0) {
     										value = defaultValue;
     									}
     
     									double[] values = ParamUtil.getDoubleValues(request, "ExpandoAttribute--" + name + "--", (double[])value);
     									

    response.write(randomNamespace)+response.write(request.getAttribute("randomNamespace"));response.write(HtmlUtil.getAUICompatibleId(name));response.write(HtmlUtil.getEscapeAttribute(name));response.write( StringUtil.merge(values, StringPool.NEW_LINE) )+response.write(request.getAttribute(" StringUtil").merge(values, StringPool.NEW_LINE) );







      
     									float[] curValue = (float[])value;
     
     									for (float curDefaultValue : (float[])defaultValue) {
     									



      
     									}
     									




      
     									float[] curValue = (float[])value;
     
     									for (float curDefaultValue : (float[])defaultValue) {
     									



      
     									}
     									



    response.write(HtmlUtil.getEscapeAttribute(name));

       
     										float[] curValue = (float[])value;
     
     										for (float curDefaultValue : (float[])defaultValue) {
     										

     response.write( ((curValue.length > 0) && ArrayUtil.contains(curValue, curDefaultValue)) ? "selected" : "" );response.write( curDefaultValue )+response.write(request.getAttribute(" curDefaultValue "));

       
     										}
     										





      
     									if (((float[])value).length == 0) {
     										value = defaultValue;
     									}
     
     									float[] values = ParamUtil.getFloatValues(request, "ExpandoAttribute--" + name + "--", (float[])value);
     									

    response.write(randomNamespace)+response.write(request.getAttribute("randomNamespace"));response.write(HtmlUtil.getAUICompatibleId(name));response.write(HtmlUtil.getEscapeAttribute(name));response.write( StringUtil.merge((float[])value, StringPool.NEW_LINE) );







      
     									int[] curValue = (int[])value;
     
     									for (int curDefaultValue : (int[])defaultValue) {
     									



      
     									}
     									




      
     									int[] curValue = (int[])value;
     
     									for (int curDefaultValue : (int[])defaultValue) {
     									



      
     									}
     									



    response.write(HtmlUtil.getEscapeAttribute(name));

       
     										int[] curValue = (int[])value;
     
     										for (int curDefaultValue : (int[])defaultValue) {
     										

     response.write( ((curValue.length > 0) && ArrayUtil.contains(curValue, curDefaultValue)) ? "selected" : "" );response.write( curDefaultValue )+response.write(request.getAttribute(" curDefaultValue "));

       
     										}
     										





      
     									if (((int[])value).length == 0) {
     										value = defaultValue;
     									}
     
     									int[] values = ParamUtil.getIntegerValues(request, "ExpandoAttribute--" + name + "--", (int[])value);
     									

    response.write(randomNamespace)+response.write(request.getAttribute("randomNamespace"));response.write(HtmlUtil.getAUICompatibleId(name));response.write(HtmlUtil.getEscapeAttribute(name));response.write( StringUtil.merge(values, StringPool.NEW_LINE) )+response.write(request.getAttribute(" StringUtil").merge(values, StringPool.NEW_LINE) );







      
     									long[] curValue = (long[])value;
     
     									for (long curDefaultValue : (long[])defaultValue) {
     									



      
     									}
     									




      
     									long[] curValue = (long[])value;
     
     									for (long curDefaultValue : (long[])defaultValue) {
     									



      
     									}
     									



    response.write(HtmlUtil.getEscapeAttribute(name));

       
     										long[] curValue = (long[])value;
     
     										for (long curDefaultValue : (long[])defaultValue) {
     										

     response.write( ((curValue.length > 0) && ArrayUtil.contains(curValue, curDefaultValue)) ? "selected" : "" );response.write( curDefaultValue )+response.write(request.getAttribute(" curDefaultValue "));

       
     										}
     										





      
     									if (((long[])value).length == 0) {
     										value = defaultValue;
     									}
     
     									long[] values = ParamUtil.getLongValues(request, "ExpandoAttribute--" + name + "--", (long[])value);
     									

    response.write(randomNamespace)+response.write(request.getAttribute("randomNamespace"));response.write(HtmlUtil.getAUICompatibleId(name));response.write(HtmlUtil.getEscapeAttribute(name));response.write( StringUtil.merge(values, StringPool.NEW_LINE) )+response.write(request.getAttribute(" StringUtil").merge(values, StringPool.NEW_LINE) );







      
     									Number[] curValue = (Number[])value;
     
     									for (Number curDefaultValue : (Number[])defaultValue) {
     									



      
     									}
     									




      
     									Number[] curValue = (Number[])value;
     
     									for (Number curDefaultValue : (Number[])defaultValue) {
     									



      
     									}
     									



    response.write(HtmlUtil.getEscapeAttribute(name));

       
     										Number[] curValue = (Number[])value;
     
     										for (Number curDefaultValue : (Number[])defaultValue) {
     										

     response.write( ((curValue.length > 0) && ArrayUtil.contains(curValue, curDefaultValue)) ? "selected" : "" );response.write( curDefaultValue )+response.write(request.getAttribute(" curDefaultValue "));

       
     										}
     										





      
     									if (((Number[])value).length == 0) {
     										value = defaultValue;
     									}
     
     									Number[] values = ParamUtil.getNumberValues(request, "ExpandoAttribute--" + name + "--", (Number[])value);
     									

    response.write(randomNamespace)+response.write(request.getAttribute("randomNamespace"));response.write(HtmlUtil.getAUICompatibleId(name));response.write(HtmlUtil.getEscapeAttribute(name));response.write( StringUtil.merge(values, StringPool.NEW_LINE) )+response.write(request.getAttribute(" StringUtil").merge(values, StringPool.NEW_LINE) );








      
     									short[] curValue = (short[])value;
     
     									for (short curDefaultValue : (short[])defaultValue) {
     									



      
     									}
     									




      
     									short[] curValue = (short[])value;
     
     									for (short curDefaultValue : (short[])defaultValue) {
     									



      
     									}
     									



    response.write(HtmlUtil.getEscapeAttribute(name));

       
     										short[] curValue = (short[])value;
     
     										for (short curDefaultValue : (short[])defaultValue) {
     										

     response.write( ((curValue.length > 0) && ArrayUtil.contains(curValue, curDefaultValue)) ? "selected" : "" );response.write( curDefaultValue )+response.write(request.getAttribute(" curDefaultValue "));

       
     										}
     										





      
     									if (((short[])value).length == 0) {
     										value = defaultValue;
     									}
     
     									short[] values = ParamUtil.getShortValues(request, "ExpandoAttribute--" + name + "--", (short[])value);
     									

    response.write(randomNamespace)+response.write(request.getAttribute("randomNamespace"));response.write(HtmlUtil.getAUICompatibleId(name));response.write(HtmlUtil.getEscapeAttribute(name));response.write( StringUtil.merge(values, StringPool.NEW_LINE) )+response.write(request.getAttribute(" StringUtil").merge(values, StringPool.NEW_LINE) );







      
     									String[] curValue = (String[])value;
     
     									for (String curDefaultValue : (String[])defaultValue) {
     									



      
     									}
     									




      
     									String[] curValue = (String[])value;
     
     									for (String curDefaultValue : (String[])defaultValue) {
     									



      
     									}
     									



    response.write(HtmlUtil.getEscapeAttribute(name));

       
     										String[] curValue = (String[])value;
     
     										for (String curDefaultValue : (String[])defaultValue) {
     										

     response.write( ((curValue.length > 0) && ArrayUtil.contains(curValue, curDefaultValue)) ? "selected" : "" );response.write( HtmlUtil.escape(curDefaultValue) )+response.write(request.getAttribute(" HtmlUtil").escape(curDefaultValue) );response.write( HtmlUtil.escape(curDefaultValue) )+response.write(request.getAttribute(" HtmlUtil").escape(curDefaultValue) );

       
     										}
     										





      
     									String paramValue = ParamUtil.getString(request, "ExpandoAttribute--" + name + "--");
     
     									if (value == null) {
     										value = defaultValue;
     									}
     
     									String[] values = (String[])value;
     
     									if (Validator.isNotNull(paramValue)) {
     										values = new String[] {paramValue};
     									}
     									

    response.write(randomNamespace)+response.write(request.getAttribute("randomNamespace"));response.write(HtmlUtil.getAUICompatibleId(name));response.write(HtmlUtil.getEscapeAttribute(name));response.write( HtmlUtil.escape(StringUtil.merge(values, StringPool.NEW_LINE)) )+response.write(request.getAttribute(" HtmlUtil").escape(StringUtil.merge(values, StringPool.NEW_LINE)) );





    
     							String xml = ParamUtil.getString(request, "ExpandoAttribute--" + name + "--");
     
     							if (Validator.isNull(xml) && (value != null)) {
     								xml = LocalizationUtil.updateLocalization((Map<Locale,String>)value, StringPool.BLANK, "Data", LocaleUtil.toLanguageId(locale));
     							}
     
     							if (Validator.isNull(xml) && (defaultValue != null)) {
     								xml = LocalizationUtil.updateLocalization((Map<Locale,String>)defaultValue, StringPool.BLANK, "Data", LocaleUtil.toLanguageId(locale));
     							}
     							

   response.write( randomNamespace + name );response.write( "ExpandoAttribute--" + name + "--" );response.write( xml )+response.write(request.getAttribute(" xml "));



    
     							String paramValue = ParamUtil.getString(request, "ExpandoAttribute--" + name + "--");
     
     							if (Validator.isNotNull(paramValue)) {
     								value = paramValue;
     							}
     
     							if (Validator.isNull(String.valueOf(value))) {
     								value = defaultValue;
     							}
     							



    response.write(randomNamespace)+response.write(request.getAttribute("randomNamespace"));response.write(HtmlUtil.getAUICompatibleId(name));       response.write( HtmlUtil.escapeAttribute(name) );


      response.write( propertyHeight );



     response.write( propertyWidth );

    response.write( HtmlUtil.escape(String.valueOf(value)) );


    response.write(randomNamespace)+response.write(request.getAttribute("randomNamespace"));response.write(HtmlUtil.getAUICompatibleId(name));    response.write( HtmlUtil.escapeAttribute(name) );


     response.write( propertyWidth );

  response.write( propertySecret ? "password" : "text" );response.write( HtmlUtil.escape(String.valueOf(value)) );









 
     				StringBundler sb = new StringBundler();
     
     				if (type == ExpandoColumnConstants.BOOLEAN) {
     					sb.append((Boolean)value);
     				}
     				else if (type == ExpandoColumnConstants.BOOLEAN_ARRAY) {
     					if (!Arrays.equals((boolean[])value, (boolean[])defaultValue)) {
     						sb.append(StringUtil.merge((boolean[])value));
     					}
     				}
     				else if (type == ExpandoColumnConstants.DATE) {
     					sb.append(dateFormatDateTime.format((Date)value));
     				}
     				else if (type == ExpandoColumnConstants.DATE_ARRAY) {
     					if (!Arrays.deepEquals((Date[])value, (Date[])defaultValue)) {
     						Date[] dates = (Date[])value;
     
     						for (int i = 0; i < dates.length; i++) {
     							if (i != 0) {
     								sb.append(StringPool.COMMA_AND_SPACE);
     							}
     
     							sb.append(dateFormatDateTime.format(dates[i]));
     						}
     					}
     				}
     				else if (type == ExpandoColumnConstants.DOUBLE) {
     					sb.append((Double)value);
     				}
     				else if (type == ExpandoColumnConstants.DOUBLE_ARRAY) {
     					sb.append(StringUtil.merge((double[])value));
     				}
     				else if (type == ExpandoColumnConstants.FLOAT) {
     					sb.append((Float)value);
     				}
     				else if (type == ExpandoColumnConstants.FLOAT_ARRAY) {
     					sb.append(StringUtil.merge((float[])value));
     				}
     				else if (type == ExpandoColumnConstants.INTEGER) {
     					sb.append((Integer)value);
     				}
     				else if (type == ExpandoColumnConstants.INTEGER_ARRAY) {
     					sb.append(StringUtil.merge((int[])value));
     				}
     				else if (type == ExpandoColumnConstants.LONG) {
     					sb.append((Long)value);
     				}
     				else if (type == ExpandoColumnConstants.LONG_ARRAY) {
     					sb.append(StringUtil.merge((long[])value));
     				}
     				else if (type == ExpandoColumnConstants.NUMBER) {
     					sb.append((Number)value);
     				}
     				else if (type == ExpandoColumnConstants.NUMBER_ARRAY) {
     					sb.append(StringUtil.merge((Number[])value));
     				}
     				else if (type == ExpandoColumnConstants.SHORT) {
     					sb.append((Short)value);
     				}
     				else if (type == ExpandoColumnConstants.SHORT_ARRAY) {
     					sb.append(StringUtil.merge((short[])value));
     				}
     				else if (type == ExpandoColumnConstants.STRING_ARRAY) {
     					sb.append(StringUtil.merge((String[])value));
     				}
     				else if (type == ExpandoColumnConstants.STRING_LOCALIZED) {
     					Map<Locale, String> values = (Map<Locale, String>)value;
     
     					sb.append(values.get(locale));
     				}
     				else {
     					sb.append((String)value);
     				}
     				


 response.write( label ? localizedName : StringPool.BLANK );
 response.write(randomNamespace)+response.write(request.getAttribute("randomNamespace"));response.write(HtmlUtil.getAUICompatibleId(name));response.write( HtmlUtil.escape(sb.toString()) );
}

}
