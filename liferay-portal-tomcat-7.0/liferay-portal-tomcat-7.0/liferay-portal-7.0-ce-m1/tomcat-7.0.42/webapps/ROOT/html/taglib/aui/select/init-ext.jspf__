 package PackageNo1718304601; public class init_ext_jspf {  /* 1 */ private static Map<Class<?>, Object> _primitiveObjects = new HashMap<Class<?>, Object>(); /* 69 */ static { /* 71 */ 	_primitiveObjects.put(byte.class, new Byte("0")); /* 72 */ 	_primitiveObjects.put(double.class, new Double(0)); /* 73 */ 	_primitiveObjects.put(float.class, new Float(0)); /* 74 */ 	_primitiveObjects.put(int.class, new Integer(0)); /* 75 */ 	_primitiveObjects.put(long.class, new Long(0)); /* 76 */ 	_primitiveObjects.put(short.class, new Short("0")); /* 77 */ } /* 78 */  public void Checkmarx_Class_Init(HttpServletRequest request, HttpServletResponse response, HttpSession session, ServletContext application, PageContext pageContext) {jspInit();















     
     if (request.getAttribute("aui:select:useNamespace") == null) {
     	useNamespace = auiFormUseNamespace;
     }
     
     if (!useNamespace) {
     	namespace = StringPool.BLANK;
     }
     
     if (Validator.isNull(label) && changesContext) {
     	StringBundler sb = new StringBundler(5);
     
     	sb.append(LanguageUtil.get(request, title));
     	sb.append(StringPool.SPACE);
     	sb.append(StringPool.OPEN_PARENTHESIS);
     	sb.append(LanguageUtil.get(request, "changing-the-value-of-this-field-will-reload-the-page"));
     	sb.append(StringPool.CLOSE_PARENTHESIS);
     
     	title = sb.toString();
     }
     else if (Validator.isNotNull(title)) {
     	title = LanguageUtil.get(request, title);
     }
     
     String controlGroupCssClass = AUIUtil.buildControlGroupCss(inlineField, inlineLabel, wrapperCssClass, "select");
     String fieldCss = AUIUtil.buildCss("form-control", disabled, first, last, cssClass);
     
     boolean numericValue = false;
     
     if ((bean != null) && Validator.isNull(listType) && showEmptyOption) {
     	Object propertyInstance = null;
     
     	Class<?> propertyTypeClass = BeanPropertiesUtil.getObjectTypeSilent(bean, name, String.class);
     
     	if (propertyTypeClass.isPrimitive()) {
     		propertyInstance = _primitiveObjects.get(propertyTypeClass);
     	}
     	else {
     		try {
     			propertyInstance = propertyTypeClass.newInstance();
     		}
     		catch (Exception e) {
     		}
     	}
     
     	if (propertyInstance instanceof Number) {
     		numericValue = true;
     	}
     }
     
}

}
