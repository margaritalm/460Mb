 package PackageNo884300472; public class site_columns_jspf {  public void Checkmarx_Class_Init(HttpServletRequest request, HttpServletResponse response, HttpSession session, ServletContext application, PageContext pageContext) {jspInit();

















      response.write( true )+response.write(request.getAttribute(" true "));





       
     		Organization organization = OrganizationLocalServiceUtil.getOrganization(curGroup.getOrganizationId());
     		

      response.write( organization.getType() )+response.write(request.getAttribute(" organization").getType() );


      
     	List<String> names = new ArrayList<String>();
     
     	List<String> organizationNames = SitesUtil.getOrganizationNames(curGroup, user);
     
     	names.addAll(organizationNames);
     
     	boolean organizationUser = !organizationNames.isEmpty();
     
     	row.setParameter("organizationUser", organizationUser);
     
     	List<String> userGroupNames = SitesUtil.getUserGroupNames(curGroup, user);
     
     	names.addAll(userGroupNames);
     
     	boolean userGroupUser = !userGroupNames.isEmpty();
     
     	row.setParameter("userGroupUser", userGroupUser);
     
     	if (organizationUser || userGroupUser) {
     		String message = StringPool.BLANK;
     
     		if (names.size() == 1) {
     			message = LanguageUtil.format(request, "you-are-a-member-of-x-because-you-belong-to-x", new Object[] {HtmlUtil.escape(curGroup.getDescriptiveName(locale)), names.get(0)}, false);
     		}
     		else {
     			message = LanguageUtil.format(request, "you-are-a-member-of-x-because-you-belong-to-x-and-x", new Object[] {HtmlUtil.escape(curGroup.getDescriptiveName(locale)), StringUtil.merge(names.subList(0, names.size() - 1).toArray(new String[names.size() - 1]), ", "), names.get(names.size() - 1)}, false);
     		}
     	

   response.write( message );

      
     	}
     
     	if (GroupPermissionUtil.contains(permissionChecker, curGroup, ActionKeys.VIEW)) {
     		List<Group> childSites = GroupServiceUtil.getGroups(company.getCompanyId(), curGroup.getGroupId(), true);
     
     		if (!childSites.isEmpty()) {
     	




       response.write(String.getValueOf(curGroup().getGroupId()));
       response.write(SiteConstants.getLIST_VIEW_TREE())+response.write(request.getAttribute("SiteConstants").getLIST_VIEW_TREE());



       response.write(viewSubsitesURL.getToString())+response.write(request.getAttribute("viewSubsitesURL").getToString());
       response.write( LanguageUtil.format(request, childSites.size() == 1 ? "this-site-has-x-child-site" : "this-site-has-x-child-sites", String.valueOf(childSites.size()), false) );



      
     		}
     	}
     	




 response.write( rowURL )+response.write(request.getAttribute(" rowURL "));

  response.write( LanguageUtil.get(request, curGroup.getTypeLabel()) )+response.write(request.getAttribute(" LanguageUtil").get(request, curGroup.getTypeLabel()) );






      
     	LinkedHashMap<String, Object> userParams = new LinkedHashMap<String, Object>();
     
     	userParams.put("inherit", Boolean.TRUE);
     	userParams.put("usersGroups", new Long(curGroup.getGroupId()));
     
     	int usersCount = UserLocalServiceUtil.searchCount(company.getCompanyId(), null, WorkflowConstants.STATUS_APPROVED, userParams);
     	



     response.write( LanguageUtil.format(request, usersCount > 1 ? "x-users" : "x-user", usersCount, false) );



      
     	LinkedHashMap<String, Object> organizationParams = new LinkedHashMap<String, Object>();
     
     	organizationParams.put("groupOrganization", new Long(curGroup.getGroupId()));
     	organizationParams.put("organizationsGroups", new Long(curGroup.getGroupId()));
     
     	int organizationsCount = OrganizationLocalServiceUtil.searchCount(company.getCompanyId(), OrganizationConstants.ANY_PARENT_ORGANIZATION_ID, null, null, null, null, organizationParams);
     	



     response.write( LanguageUtil.format(request, organizationsCount > 1 ? "x-organizations" : "x-organization", organizationsCount, false) );



      
     	LinkedHashMap<String, Object> userGroupParams = new LinkedHashMap<String, Object>();
     
     	userGroupParams.put("userGroupsGroups", new Long(curGroup.getGroupId()));
     
     	int userGroupsCount = UserGroupLocalServiceUtil.searchCount(company.getCompanyId(), null, userGroupParams);
     	



     response.write( LanguageUtil.format(request, userGroupsCount > 1 ? "x-user-groups" : "x-user-group", userGroupsCount, false) );











   response.write( String.valueOf(LiveUsers.getGroupUsersCount(company.getCompanyId(), curGroup.getGroupId())) )+response.write(request.getAttribute(" String").valueOf(LiveUsers.getGroupUsersCount(company.getCompanyId(), curGroup.getGroupId())) );





  response.write( LanguageUtil.get(request, (curGroup.isActive() ? "yes" : "no")) );





   response.write( (curGroup.getType() == GroupConstants.TYPE_SITE_RESTRICTED) ? String.valueOf(MembershipRequestLocalServiceUtil.searchCount(curGroup.getGroupId(), MembershipRequestConstants.STATUS_PENDING)) : StringPool.BLANK )+response.write(request.getAttribute(" (curGroup").getType() == GroupConstants.TYPE_SITE_RESTRICTED) ? String.valueOf(MembershipRequestLocalServiceUtil.searchCount(curGroup.getGroupId(), MembershipRequestConstants.STATUS_PENDING)) : StringPool.BLANK );







       response.write( Group.class.getName() );
     response.write( curGroup.getGroupId() )+response.write(request.getAttribute(" curGroup").getGroupId() );
}

}
