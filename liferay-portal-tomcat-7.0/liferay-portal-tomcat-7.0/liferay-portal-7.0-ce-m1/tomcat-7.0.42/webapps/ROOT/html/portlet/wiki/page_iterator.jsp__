 package PackageNo1722317553;import _html_portlet_init_jsp;import _html_portlet_wiki_init_ext_jsp;import com.liferay.portal.NoSuchModelException;import com.liferay.portal.kernel.sanitizer.SanitizerException;import com.liferay.portal.kernel.sanitizer.SanitizerUtil;import com.liferay.portlet.social.model.SocialActivity;import com.liferay.portlet.social.model.SocialActivityConstants;import com.liferay.portlet.social.service.SocialActivityLocalServiceUtil;import com.liferay.portlet.trash.service.TrashEntryLocalServiceUtil;import com.liferay.portlet.wiki.DuplicateNodeNameException;import com.liferay.portlet.wiki.DuplicatePageException;import com.liferay.portlet.wiki.ImportFilesException;import com.liferay.portlet.wiki.NoSuchNodeException;import com.liferay.portlet.wiki.NoSuchPageException;import com.liferay.portlet.wiki.NodeNameException;import com.liferay.portlet.wiki.PageContentException;import com.liferay.portlet.wiki.PageTitleException;import com.liferay.portlet.wiki.PageVersionException;import com.liferay.portlet.wiki.RequiredNodeException;import com.liferay.portlet.wiki.WikiFormatException;import com.liferay.portlet.wiki.WikiPortletInstanceSettings;import com.liferay.portlet.wiki.WikiSettings;import com.liferay.portlet.wiki.context.WikiConfigurationDisplayContext;import com.liferay.portlet.wiki.importers.WikiImporterKeys;import com.liferay.portlet.wiki.model.WikiNode;import com.liferay.portlet.wiki.model.WikiPage;import com.liferay.portlet.wiki.model.WikiPageConstants;import com.liferay.portlet.wiki.model.WikiPageDisplay;import com.liferay.portlet.wiki.model.WikiPageResource;import com.liferay.portlet.wiki.model.impl.WikiPageImpl;import com.liferay.portlet.wiki.service.WikiNodeServiceUtil;import com.liferay.portlet.wiki.service.WikiPageLocalServiceUtil;import com.liferay.portlet.wiki.service.WikiPageResourceLocalServiceUtil;import com.liferay.portlet.wiki.service.WikiPageServiceUtil;import com.liferay.portlet.wiki.service.permission.WikiNodePermission;import com.liferay.portlet.wiki.service.permission.WikiPagePermission;import com.liferay.portlet.wiki.service.permission.WikiPermission;import com.liferay.portlet.wiki.social.WikiActivityKeys;import com.liferay.portlet.wiki.util.WikiCacheUtil;import com.liferay.portlet.wiki.util.WikiConstants;import com.liferay.portlet.wiki.util.WikiPageAttachmentsUtil;import com.liferay.portlet.wiki.util.WikiUtil;import com.liferay.portlet.wiki.util.comparator.PageVersionComparator; public class page_iterator_jsp {  public void Checkmarx_Class_Init(HttpServletRequest request, HttpServletResponse response, HttpSession session, ServletContext application, PageContext pageContext) {jspInit();















/* ?inc?c:\cxsrc\_LANGUAGES_\Java\500_1m\liferay-portal-tomcat-7.0\liferay-portal-7.0-ce-m1\tomcat-7.0.42\webapps\ROOT\html\portlet\wiki\page_iterator.jsp */ /* 17?c:\cxsrc\_LANGUAGES_\Java\500_1m\liferay-portal-tomcat-7.0\liferay-portal-7.0-ce-m1\tomcat-7.0.42\webapps\ROOT\html\portlet\wiki\page_iterator.jsp */ /* 1?inc?c:\cxsrc\_LANGUAGES_\Java\500_1m\liferay-portal-tomcat-7.0\liferay-portal-7.0-ce-m1\tomcat-7.0.42\webapps\ROOT\html\portlet\wiki\init.jsp */ /* 2?inc?c:\cxsrc\_LANGUAGES_\Java\500_1m\liferay-portal-tomcat-7.0\liferay-portal-7.0-ce-m1\tomcat-7.0.42\webapps\ROOT\html\portlet\wiki\init.jsp */ /* 3?inc?c:\cxsrc\_LANGUAGES_\Java\500_1m\liferay-portal-tomcat-7.0\liferay-portal-7.0-ce-m1\tomcat-7.0.42\webapps\ROOT\html\portlet\wiki\init.jsp */ /* 4?inc?c:\cxsrc\_LANGUAGES_\Java\500_1m\liferay-portal-tomcat-7.0\liferay-portal-7.0-ce-m1\tomcat-7.0.42\webapps\ROOT\html\portlet\wiki\init.jsp */ /* 5?inc?c:\cxsrc\_LANGUAGES_\Java\500_1m\liferay-portal-tomcat-7.0\liferay-portal-7.0-ce-m1\tomcat-7.0.42\webapps\ROOT\html\portlet\wiki\init.jsp */ /* 6?inc?c:\cxsrc\_LANGUAGES_\Java\500_1m\liferay-portal-tomcat-7.0\liferay-portal-7.0-ce-m1\tomcat-7.0.42\webapps\ROOT\html\portlet\wiki\init.jsp */ /* 7?inc?c:\cxsrc\_LANGUAGES_\Java\500_1m\liferay-portal-tomcat-7.0\liferay-portal-7.0-ce-m1\tomcat-7.0.42\webapps\ROOT\html\portlet\wiki\init.jsp */ /* 8?inc?c:\cxsrc\_LANGUAGES_\Java\500_1m\liferay-portal-tomcat-7.0\liferay-portal-7.0-ce-m1\tomcat-7.0.42\webapps\ROOT\html\portlet\wiki\init.jsp */ /* 9?inc?c:\cxsrc\_LANGUAGES_\Java\500_1m\liferay-portal-tomcat-7.0\liferay-portal-7.0-ce-m1\tomcat-7.0.42\webapps\ROOT\html\portlet\wiki\init.jsp */ /* 10?inc?c:\cxsrc\_LANGUAGES_\Java\500_1m\liferay-portal-tomcat-7.0\liferay-portal-7.0-ce-m1\tomcat-7.0.42\webapps\ROOT\html\portlet\wiki\init.jsp */ /* 11?inc?c:\cxsrc\_LANGUAGES_\Java\500_1m\liferay-portal-tomcat-7.0\liferay-portal-7.0-ce-m1\tomcat-7.0.42\webapps\ROOT\html\portlet\wiki\init.jsp */ /* 12?inc?c:\cxsrc\_LANGUAGES_\Java\500_1m\liferay-portal-tomcat-7.0\liferay-portal-7.0-ce-m1\tomcat-7.0.42\webapps\ROOT\html\portlet\wiki\init.jsp */ /* 13?inc?c:\cxsrc\_LANGUAGES_\Java\500_1m\liferay-portal-tomcat-7.0\liferay-portal-7.0-ce-m1\tomcat-7.0.42\webapps\ROOT\html\portlet\wiki\init.jsp */ /* 14?inc?c:\cxsrc\_LANGUAGES_\Java\500_1m\liferay-portal-tomcat-7.0\liferay-portal-7.0-ce-m1\tomcat-7.0.42\webapps\ROOT\html\portlet\wiki\init.jsp */ /* 15?inc?c:\cxsrc\_LANGUAGES_\Java\500_1m\liferay-portal-tomcat-7.0\liferay-portal-7.0-ce-m1\tomcat-7.0.42\webapps\ROOT\html\portlet\wiki\init.jsp */ /* 16?inc?c:\cxsrc\_LANGUAGES_\Java\500_1m\liferay-portal-tomcat-7.0\liferay-portal-7.0-ce-m1\tomcat-7.0.42\webapps\ROOT\html\portlet\wiki\init.jsp */ /* 17?inc?c:\cxsrc\_LANGUAGES_\Java\500_1m\liferay-portal-tomcat-7.0\liferay-portal-7.0-ce-m1\tomcat-7.0.42\webapps\ROOT\html\portlet\wiki\init.jsp */ /* 18?inc?c:\cxsrc\_LANGUAGES_\Java\500_1m\liferay-portal-tomcat-7.0\liferay-portal-7.0-ce-m1\tomcat-7.0.42\webapps\ROOT\html\portlet\wiki\init.jsp */ /* 19?inc?c:\cxsrc\_LANGUAGES_\Java\500_1m\liferay-portal-tomcat-7.0\liferay-portal-7.0-ce-m1\tomcat-7.0.42\webapps\ROOT\html\portlet\wiki\init.jsp */ /* 20?inc?c:\cxsrc\_LANGUAGES_\Java\500_1m\liferay-portal-tomcat-7.0\liferay-portal-7.0-ce-m1\tomcat-7.0.42\webapps\ROOT\html\portlet\wiki\init.jsp */ /* 21?inc?c:\cxsrc\_LANGUAGES_\Java\500_1m\liferay-portal-tomcat-7.0\liferay-portal-7.0-ce-m1\tomcat-7.0.42\webapps\ROOT\html\portlet\wiki\init.jsp */ /* 22?inc?c:\cxsrc\_LANGUAGES_\Java\500_1m\liferay-portal-tomcat-7.0\liferay-portal-7.0-ce-m1\tomcat-7.0.42\webapps\ROOT\html\portlet\wiki\init.jsp */ /* 23?inc?c:\cxsrc\_LANGUAGES_\Java\500_1m\liferay-portal-tomcat-7.0\liferay-portal-7.0-ce-m1\tomcat-7.0.42\webapps\ROOT\html\portlet\wiki\init.jsp */ /* 24?inc?c:\cxsrc\_LANGUAGES_\Java\500_1m\liferay-portal-tomcat-7.0\liferay-portal-7.0-ce-m1\tomcat-7.0.42\webapps\ROOT\html\portlet\wiki\init.jsp */ /* 25?inc?c:\cxsrc\_LANGUAGES_\Java\500_1m\liferay-portal-tomcat-7.0\liferay-portal-7.0-ce-m1\tomcat-7.0.42\webapps\ROOT\html\portlet\wiki\init.jsp */ /* 26?inc?c:\cxsrc\_LANGUAGES_\Java\500_1m\liferay-portal-tomcat-7.0\liferay-portal-7.0-ce-m1\tomcat-7.0.42\webapps\ROOT\html\portlet\wiki\init.jsp */ /* 27?inc?c:\cxsrc\_LANGUAGES_\Java\500_1m\liferay-portal-tomcat-7.0\liferay-portal-7.0-ce-m1\tomcat-7.0.42\webapps\ROOT\html\portlet\wiki\init.jsp */ /* 28?inc?c:\cxsrc\_LANGUAGES_\Java\500_1m\liferay-portal-tomcat-7.0\liferay-portal-7.0-ce-m1\tomcat-7.0.42\webapps\ROOT\html\portlet\wiki\init.jsp */ /* 29?inc?c:\cxsrc\_LANGUAGES_\Java\500_1m\liferay-portal-tomcat-7.0\liferay-portal-7.0-ce-m1\tomcat-7.0.42\webapps\ROOT\html\portlet\wiki\init.jsp */ /* 30?inc?c:\cxsrc\_LANGUAGES_\Java\500_1m\liferay-portal-tomcat-7.0\liferay-portal-7.0-ce-m1\tomcat-7.0.42\webapps\ROOT\html\portlet\wiki\init.jsp */ /* 31?inc?c:\cxsrc\_LANGUAGES_\Java\500_1m\liferay-portal-tomcat-7.0\liferay-portal-7.0-ce-m1\tomcat-7.0.42\webapps\ROOT\html\portlet\wiki\init.jsp */ /* 32?inc?c:\cxsrc\_LANGUAGES_\Java\500_1m\liferay-portal-tomcat-7.0\liferay-portal-7.0-ce-m1\tomcat-7.0.42\webapps\ROOT\html\portlet\wiki\init.jsp */ /* 33?inc?c:\cxsrc\_LANGUAGES_\Java\500_1m\liferay-portal-tomcat-7.0\liferay-portal-7.0-ce-m1\tomcat-7.0.42\webapps\ROOT\html\portlet\wiki\init.jsp */ /* 34?inc?c:\cxsrc\_LANGUAGES_\Java\500_1m\liferay-portal-tomcat-7.0\liferay-portal-7.0-ce-m1\tomcat-7.0.42\webapps\ROOT\html\portlet\wiki\init.jsp */ /* 35?inc?c:\cxsrc\_LANGUAGES_\Java\500_1m\liferay-portal-tomcat-7.0\liferay-portal-7.0-ce-m1\tomcat-7.0.42\webapps\ROOT\html\portlet\wiki\init.jsp */ /* 36?inc?c:\cxsrc\_LANGUAGES_\Java\500_1m\liferay-portal-tomcat-7.0\liferay-portal-7.0-ce-m1\tomcat-7.0.42\webapps\ROOT\html\portlet\wiki\init.jsp */ /* 37?inc?c:\cxsrc\_LANGUAGES_\Java\500_1m\liferay-portal-tomcat-7.0\liferay-portal-7.0-ce-m1\tomcat-7.0.42\webapps\ROOT\html\portlet\wiki\init.jsp */ /* 38?inc?c:\cxsrc\_LANGUAGES_\Java\500_1m\liferay-portal-tomcat-7.0\liferay-portal-7.0-ce-m1\tomcat-7.0.42\webapps\ROOT\html\portlet\wiki\init.jsp */ /* 39?inc?c:\cxsrc\_LANGUAGES_\Java\500_1m\liferay-portal-tomcat-7.0\liferay-portal-7.0-ce-m1\tomcat-7.0.42\webapps\ROOT\html\portlet\wiki\init.jsp */ /* 40?inc?c:\cxsrc\_LANGUAGES_\Java\500_1m\liferay-portal-tomcat-7.0\liferay-portal-7.0-ce-m1\tomcat-7.0.42\webapps\ROOT\html\portlet\wiki\init.jsp */ /* 41?inc?c:\cxsrc\_LANGUAGES_\Java\500_1m\liferay-portal-tomcat-7.0\liferay-portal-7.0-ce-m1\tomcat-7.0.42\webapps\ROOT\html\portlet\wiki\init.jsp */ /* 42?inc?c:\cxsrc\_LANGUAGES_\Java\500_1m\liferay-portal-tomcat-7.0\liferay-portal-7.0-ce-m1\tomcat-7.0.42\webapps\ROOT\html\portlet\wiki\init.jsp */ /* 43?inc?c:\cxsrc\_LANGUAGES_\Java\500_1m\liferay-portal-tomcat-7.0\liferay-portal-7.0-ce-m1\tomcat-7.0.42\webapps\ROOT\html\portlet\wiki\init.jsp */ /* 44?inc?c:\cxsrc\_LANGUAGES_\Java\500_1m\liferay-portal-tomcat-7.0\liferay-portal-7.0-ce-m1\tomcat-7.0.42\webapps\ROOT\html\portlet\wiki\init.jsp */ /* 45?inc?c:\cxsrc\_LANGUAGES_\Java\500_1m\liferay-portal-tomcat-7.0\liferay-portal-7.0-ce-m1\tomcat-7.0.42\webapps\ROOT\html\portlet\wiki\init.jsp */ /* 46?inc?c:\cxsrc\_LANGUAGES_\Java\500_1m\liferay-portal-tomcat-7.0\liferay-portal-7.0-ce-m1\tomcat-7.0.42\webapps\ROOT\html\portlet\wiki\init.jsp */ /* 47?inc?c:\cxsrc\_LANGUAGES_\Java\500_1m\liferay-portal-tomcat-7.0\liferay-portal-7.0-ce-m1\tomcat-7.0.42\webapps\ROOT\html\portlet\wiki\init.jsp */ /* 48?inc?c:\cxsrc\_LANGUAGES_\Java\500_1m\liferay-portal-tomcat-7.0\liferay-portal-7.0-ce-m1\tomcat-7.0.42\webapps\ROOT\html\portlet\wiki\init.jsp */ /* 49?inc?c:\cxsrc\_LANGUAGES_\Java\500_1m\liferay-portal-tomcat-7.0\liferay-portal-7.0-ce-m1\tomcat-7.0.42\webapps\ROOT\html\portlet\wiki\init.jsp */ /* 50?inc?c:\cxsrc\_LANGUAGES_\Java\500_1m\liferay-portal-tomcat-7.0\liferay-portal-7.0-ce-m1\tomcat-7.0.42\webapps\ROOT\html\portlet\wiki\init.jsp */ /* 51?inc?c:\cxsrc\_LANGUAGES_\Java\500_1m\liferay-portal-tomcat-7.0\liferay-portal-7.0-ce-m1\tomcat-7.0.42\webapps\ROOT\html\portlet\wiki\init.jsp */ /* 52?inc?c:\cxsrc\_LANGUAGES_\Java\500_1m\liferay-portal-tomcat-7.0\liferay-portal-7.0-ce-m1\tomcat-7.0.42\webapps\ROOT\html\portlet\wiki\init.jsp */ /* 53?inc?c:\cxsrc\_LANGUAGES_\Java\500_1m\liferay-portal-tomcat-7.0\liferay-portal-7.0-ce-m1\tomcat-7.0.42\webapps\ROOT\html\portlet\wiki\init.jsp */ /* 54?inc?c:\cxsrc\_LANGUAGES_\Java\500_1m\liferay-portal-tomcat-7.0\liferay-portal-7.0-ce-m1\tomcat-7.0.42\webapps\ROOT\html\portlet\wiki\init.jsp */ /* 55?inc?c:\cxsrc\_LANGUAGES_\Java\500_1m\liferay-portal-tomcat-7.0\liferay-portal-7.0-ce-m1\tomcat-7.0.42\webapps\ROOT\html\portlet\wiki\init.jsp */ /* 56?inc?c:\cxsrc\_LANGUAGES_\Java\500_1m\liferay-portal-tomcat-7.0\liferay-portal-7.0-ce-m1\tomcat-7.0.42\webapps\ROOT\html\portlet\wiki\init.jsp */ /* 57?inc?c:\cxsrc\_LANGUAGES_\Java\500_1m\liferay-portal-tomcat-7.0\liferay-portal-7.0-ce-m1\tomcat-7.0.42\webapps\ROOT\html\portlet\wiki\init.jsp */ /* 58?inc?c:\cxsrc\_LANGUAGES_\Java\500_1m\liferay-portal-tomcat-7.0\liferay-portal-7.0-ce-m1\tomcat-7.0.42\webapps\ROOT\html\portlet\wiki\init.jsp */ /* 59?inc?c:\cxsrc\_LANGUAGES_\Java\500_1m\liferay-portal-tomcat-7.0\liferay-portal-7.0-ce-m1\tomcat-7.0.42\webapps\ROOT\html\portlet\wiki\init.jsp */ /* 60?inc?c:\cxsrc\_LANGUAGES_\Java\500_1m\liferay-portal-tomcat-7.0\liferay-portal-7.0-ce-m1\tomcat-7.0.42\webapps\ROOT\html\portlet\wiki\init.jsp */ /* 61?inc?c:\cxsrc\_LANGUAGES_\Java\500_1m\liferay-portal-tomcat-7.0\liferay-portal-7.0-ce-m1\tomcat-7.0.42\webapps\ROOT\html\portlet\wiki\init.jsp */ String portletId = portletDisplay.getId(); /* 62?inc?c:\cxsrc\_LANGUAGES_\Java\500_1m\liferay-portal-tomcat-7.0\liferay-portal-7.0-ce-m1\tomcat-7.0.42\webapps\ROOT\html\portlet\wiki\init.jsp */ /* 63?inc?c:\cxsrc\_LANGUAGES_\Java\500_1m\liferay-portal-tomcat-7.0\liferay-portal-7.0-ce-m1\tomcat-7.0.42\webapps\ROOT\html\portlet\wiki\init.jsp */ if (portletId.equals(PortletKeys.PORTLET_CONFIGURATION)) { /* 64?inc?c:\cxsrc\_LANGUAGES_\Java\500_1m\liferay-portal-tomcat-7.0\liferay-portal-7.0-ce-m1\tomcat-7.0.42\webapps\ROOT\html\portlet\wiki\init.jsp */ 	 portletId = ParamUtil.getString(request, "portletResource"); /* 65?inc?c:\cxsrc\_LANGUAGES_\Java\500_1m\liferay-portal-tomcat-7.0\liferay-portal-7.0-ce-m1\tomcat-7.0.42\webapps\ROOT\html\portlet\wiki\init.jsp */ } /* 66?inc?c:\cxsrc\_LANGUAGES_\Java\500_1m\liferay-portal-tomcat-7.0\liferay-portal-7.0-ce-m1\tomcat-7.0.42\webapps\ROOT\html\portlet\wiki\init.jsp */ /* 67?inc?c:\cxsrc\_LANGUAGES_\Java\500_1m\liferay-portal-tomcat-7.0\liferay-portal-7.0-ce-m1\tomcat-7.0.42\webapps\ROOT\html\portlet\wiki\init.jsp */ WikiPortletInstanceSettings wikiPortletInstanceSettings = WikiPortletInstanceSettings.getInstance(layout, portletId); /* 68?inc?c:\cxsrc\_LANGUAGES_\Java\500_1m\liferay-portal-tomcat-7.0\liferay-portal-7.0-ce-m1\tomcat-7.0.42\webapps\ROOT\html\portlet\wiki\init.jsp */ WikiSettings wikiSettings = WikiSettings.getInstance(scopeGroupId); /* 69?inc?c:\cxsrc\_LANGUAGES_\Java\500_1m\liferay-portal-tomcat-7.0\liferay-portal-7.0-ce-m1\tomcat-7.0.42\webapps\ROOT\html\portlet\wiki\init.jsp */ /* 70?inc?c:\cxsrc\_LANGUAGES_\Java\500_1m\liferay-portal-tomcat-7.0\liferay-portal-7.0-ce-m1\tomcat-7.0.42\webapps\ROOT\html\portlet\wiki\init.jsp */ WikiConfigurationDisplayContext wikiConfigurationDisplayContext = new WikiConfigurationDisplayContext(request, wikiPortletInstanceSettings); /* 71?inc?c:\cxsrc\_LANGUAGES_\Java\500_1m\liferay-portal-tomcat-7.0\liferay-portal-7.0-ce-m1\tomcat-7.0.42\webapps\ROOT\html\portlet\wiki\init.jsp */ /* 72?inc?c:\cxsrc\_LANGUAGES_\Java\500_1m\liferay-portal-tomcat-7.0\liferay-portal-7.0-ce-m1\tomcat-7.0.42\webapps\ROOT\html\portlet\wiki\init.jsp */ Format dateFormatDateTime = FastDateFormatFactoryUtil.getDateTime(locale, timeZone); /* 73?inc?c:\cxsrc\_LANGUAGES_\Java\500_1m\liferay-portal-tomcat-7.0\liferay-portal-7.0-ce-m1\tomcat-7.0.42\webapps\ROOT\html\portlet\wiki\init.jsp */ /* 74?inc?c:\cxsrc\_LANGUAGES_\Java\500_1m\liferay-portal-tomcat-7.0\liferay-portal-7.0-ce-m1\tomcat-7.0.42\webapps\ROOT\html\portlet\wiki\init.jsp */ /* 75?inc?c:\cxsrc\_LANGUAGES_\Java\500_1m\liferay-portal-tomcat-7.0\liferay-portal-7.0-ce-m1\tomcat-7.0.42\webapps\ROOT\html\portlet\wiki\init.jsp */ /* 76?inc?c:\cxsrc\_LANGUAGES_\Java\500_1m\liferay-portal-tomcat-7.0\liferay-portal-7.0-ce-m1\tomcat-7.0.42\webapps\ROOT\html\portlet\wiki\init.jsp */ response.write(CxResponseWrite)+response.write(request.getAttribute("CxResponseWrite")); /* 17?c:\cxsrc\_LANGUAGES_\Java\500_1m\liferay-portal-tomcat-7.0\liferay-portal-7.0-ce-m1\tomcat-7.0.42\webapps\ROOT\html\portlet\wiki\page_iterator.jsp */

     
     WikiNode node = (WikiNode)request.getAttribute(WebKeys.WIKI_NODE);
     WikiPage wikiPage = (WikiPage)request.getAttribute(WebKeys.WIKI_PAGE);
     
     String type = ParamUtil.getString(request, "type");
     long categoryId = ParamUtil.getLong(request, "categoryId");
     String tagName = ParamUtil.getString(request, "tag");
     
     PortletURL portletURL = renderResponse.createRenderURL();
     
     portletURL.setParameter("nodeName", node.getName());
     
     if (wikiPage != null) {
     	portletURL.setParameter("title", wikiPage.getTitle());
     }
     
     if (type.equals("all_pages")) {
     	portletURL.setParameter("struts_action", "/wiki/view_all_pages");
     
     	PortalUtil.addPortletBreadcrumbEntry(request, LanguageUtil.get(request, "all-pages"), portletURL.toString());
     }
     else if (type.equals("categorized_pages")) {
     	portletURL.setParameter("struts_action", "/wiki/view_categorized_pages");
     	portletURL.setParameter("categoryId", String.valueOf(categoryId));
     }
     else if (type.equals("draft_pages")) {
     	portletURL.setParameter("struts_action", "/wiki/view_draft_pages");
     
     	PortalUtil.addPortletBreadcrumbEntry(request, LanguageUtil.get(request, "draft-pages"), portletURL.toString());
     }
     else if (type.equals("history")) {
     	PortletURL viewPageHistoryURL = PortletURLUtil.clone(portletURL, renderResponse);
     
     	if (wikiPage != null) {
     		portletURL.setParameter("struts_action", "/wiki/view");
     
     		PortalUtil.addPortletBreadcrumbEntry(request, wikiPage.getTitle(), portletURL.toString());
     	}
     
     	viewPageHistoryURL.setParameter("struts_action", "/wiki/view_page_activities");
     
     	PortalUtil.addPortletBreadcrumbEntry(request, LanguageUtil.get(request, "history"), viewPageHistoryURL.toString());
     }
     else if (type.equals("incoming_links")) {
     	if (wikiPage != null) {
     		portletURL.setParameter("struts_action", "/wiki/view");
     
     		PortalUtil.addPortletBreadcrumbEntry(request, wikiPage.getTitle(), portletURL.toString());
     	}
     
     	portletURL.setParameter("struts_action", "/wiki/view_page_incoming_links");
     
     	PortalUtil.addPortletBreadcrumbEntry(request, LanguageUtil.get(request, "incoming-links"), portletURL.toString());
     }
     else if (type.equals("orphan_pages")) {
     	portletURL.setParameter("struts_action", "/wiki/view_orphan_pages");
     
     	PortalUtil.addPortletBreadcrumbEntry(request, LanguageUtil.get(request, "orphan-pages"), portletURL.toString());
     }
     else if (type.equals("outgoing_links")) {
     	if (wikiPage != null) {
     		portletURL.setParameter("struts_action", "/wiki/view");
     
     		PortalUtil.addPortletBreadcrumbEntry(request, wikiPage.getTitle(), portletURL.toString());
     	}
     
     	portletURL.setParameter("struts_action", "/wiki/view_page_outgoing_links");
     
     	PortalUtil.addPortletBreadcrumbEntry(request, LanguageUtil.get(request, "outgoing-links"), portletURL.toString());
     }
     else if (type.equals("recent_changes")) {
     	portletURL.setParameter("struts_action", "/wiki/view_recent_changes");
     
     	PortalUtil.addPortletBreadcrumbEntry(request, LanguageUtil.get(request, "recent-changes"), portletURL.toString());
     }
     else if (type.equals("tagged_pages")) {
     	portletURL.setParameter("struts_action", "/wiki/view_tagged_pages");
     	portletURL.setParameter("tag", tagName);
     }
     
     List<String> headerNames = new ArrayList<String>();
     
     headerNames.add("page");
     headerNames.add("status");
     headerNames.add("revision");
     headerNames.add("user");
     headerNames.add("date");
     
     if (type.equals("history") || type.equals("recent_changes")) {
     	headerNames.add("summary");
     }
     
     if (type.equals("all_pages") || type.equals("categorized_pages") || type.equals("draft_pages") || type.equals("history") || type.equals("orphan_pages") || type.equals("recent_changes") || type.equals("tagged_pages")) {
     	headerNames.add(StringPool.BLANK);
     }
     
     String emptyResultsMessage = null;
     
     if (type.equals("all_pages")) {
     	emptyResultsMessage = "there-are-no-pages";
     }
     else if (type.equals("categorized_pages")) {
     	emptyResultsMessage = "there-are-no-pages-with-this-category";
     }
     else if (type.equals("draft_pages")) {
     	emptyResultsMessage = "there-are-no-drafts";
     }
     else if (type.equals("incoming_links")) {
     	emptyResultsMessage = "there-are-no-pages-that-link-to-this-page";
     }
     else if (type.equals("orphan_pages")) {
     	emptyResultsMessage = "there-are-no-orphan-pages";
     }
     else if (type.equals("outgoing_links")) {
     	emptyResultsMessage = "this-page-has-no-links";
     }
     else if (type.equals("pending_pages")) {
     	emptyResultsMessage = "there-are-no-pages-submitted-by-you-pending-approval";
     }
     else if (type.equals("recent_changes")) {
     	emptyResultsMessage = "there-are-no-recent-changes";
     }
     else if (type.equals("tagged_pages")) {
     	emptyResultsMessage = "there-are-no-pages-with-this-tag";
     }
     
     String orderByCol = ParamUtil.getString(request, "orderByCol");
     String orderByType = ParamUtil.getString(request, "orderByType");
     
     OrderByComparator<WikiPage> orderByComparator = WikiUtil.getPageOrderByComparator(orderByCol, orderByType);
     
     Map orderableHeaders = new HashMap();
     
     SearchContainer searchContainer = new SearchContainer(renderRequest, null, null, SearchContainer.DEFAULT_CUR_PARAM, SearchContainer.DEFAULT_DELTA, currentURLObj, headerNames, emptyResultsMessage);
     
     searchContainer.setOrderableHeaders(orderableHeaders);
     searchContainer.setOrderByCol(orderByCol);
     searchContainer.setOrderByType(orderByType);
     
     if (type.equals("history")) {
     	RowChecker rowChecker = new RowChecker(renderResponse);
     
     	rowChecker.setAllRowIds(null);
     
     	searchContainer.setRowChecker(rowChecker);
     }
     
     int total = 0;
     List<WikiPage> results = null;
     
     if (type.equals("all_pages")) {
     	orderableHeaders.put("page", "title");
     	orderableHeaders.put("date", "modifiedDate");
     
     	total = WikiPageServiceUtil.getPagesCount(themeDisplay.getScopeGroupId(), node.getNodeId(), true);
     
     	searchContainer.setTotal(total);
     
     	results = WikiPageServiceUtil.getPages(themeDisplay.getScopeGroupId(), node.getNodeId(), true, WorkflowConstants.STATUS_APPROVED, searchContainer.getStart(), searchContainer.getEnd(), orderByComparator);
     }
     else if (type.equals("categorized_pages") || type.equals("tagged_pages")) {
     	orderableHeaders.put("page", "title");
     	orderableHeaders.put("date", "modifiedDate");
     
     	AssetEntryQuery assetEntryQuery = new AssetEntryQuery(WikiPage.class.getName(), searchContainer);
     
     	assetEntryQuery.setEnablePermissions(true);
     
     	total = AssetEntryServiceUtil.getEntriesCount(assetEntryQuery);
     
     	searchContainer.setTotal(total);
     
     	assetEntryQuery.setEnd(searchContainer.getEnd());
     	assetEntryQuery.setStart(searchContainer.getStart());
     
     	List<AssetEntry> assetEntries = AssetEntryServiceUtil.getEntries(assetEntryQuery);
     
     	results = new ArrayList<WikiPage>();
     
     	for (AssetEntry assetEntry : assetEntries) {
     		WikiPageResource pageResource = WikiPageResourceLocalServiceUtil.getPageResource(assetEntry.getClassPK());
     
     		WikiPage assetPage = WikiPageLocalServiceUtil.getPage(pageResource.getNodeId(), pageResource.getTitle());
     
     		results.add(assetPage);
     	}
     }
     else if (type.equals("draft_pages") || type.equals("pending_pages")) {
     	long draftUserId = user.getUserId();
     
     	if (permissionChecker.isContentReviewer(user.getCompanyId(), scopeGroupId)) {
     		draftUserId = 0;
     	}
     
     	int status = WorkflowConstants.STATUS_DRAFT;
     
     	if (type.equals("pending_pages")) {
     		status = WorkflowConstants.STATUS_PENDING;
     	}
     
     	total = WikiPageServiceUtil.getPagesCount(themeDisplay.getScopeGroupId(), draftUserId, node.getNodeId(), status);
     
     	searchContainer.setTotal(total);
     
     	results = WikiPageServiceUtil.getPages(themeDisplay.getScopeGroupId(), draftUserId, node.getNodeId(), status, searchContainer.getStart(), searchContainer.getEnd());
     }
     else if (type.equals("orphan_pages")) {
     	List<WikiPage> orphans = WikiPageServiceUtil.getOrphans(themeDisplay.getScopeGroupId(), node.getNodeId());
     
     	total = orphans.size();
     
     	searchContainer.setTotal(total);
     
     	results = ListUtil.subList(orphans, searchContainer.getStart(), searchContainer.getEnd());
     }
     else if (type.equals("history")) {
     	total = WikiPageLocalServiceUtil.getPagesCount(wikiPage.getNodeId(), wikiPage.getTitle());
     
     	searchContainer.setTotal(total);
     
     	results = WikiPageLocalServiceUtil.getPages(wikiPage.getNodeId(), wikiPage.getTitle(), QueryUtil.ALL_POS, QueryUtil.ALL_POS, new PageVersionComparator());
     }
     else if (type.equals("incoming_links")) {
     	List<WikiPage> links = WikiPageLocalServiceUtil.getIncomingLinks(wikiPage.getNodeId(), wikiPage.getTitle());
     
     	total = links.size();
     
     	searchContainer.setTotal(total);
     
     	results = ListUtil.subList(links, searchContainer.getStart(), searchContainer.getEnd());
     }
     else if (type.equals("outgoing_links")) {
     	List<WikiPage> links = WikiPageLocalServiceUtil.getOutgoingLinks(wikiPage.getNodeId(), wikiPage.getTitle());
     
     	total = links.size();
     
     	searchContainer.setTotal(total);
     
     	results = ListUtil.subList(links, searchContainer.getStart(), searchContainer.getEnd());
     }
     else if (type.equals("recent_changes")) {
     	total = WikiPageServiceUtil.getRecentChangesCount(themeDisplay.getScopeGroupId(), node.getNodeId());
     
     	searchContainer.setTotal(total);
     
     	results = WikiPageServiceUtil.getRecentChanges(themeDisplay.getScopeGroupId(), node.getNodeId(), searchContainer.getStart(), searchContainer.getEnd());
     }
     
     searchContainer.setResults(results);
     
     List resultRows = searchContainer.getResultRows();
     
     for (int i = 0; i < results.size(); i++) {
     	WikiPage curWikiPage = results.get(i);
     
     	curWikiPage = curWikiPage.toEscapedModel();
     
     	ResultRow row = new ResultRow(curWikiPage, String.valueOf(curWikiPage.getVersion()), i);
     
     	PortletURL rowURL = renderResponse.createRenderURL();
     
     	if (!curWikiPage.isNew() && !type.equals("draft_pages") && !type.equals("pending_pages")) {
     		if (portletName.equals(PortletKeys.WIKI_DISPLAY)) {
     			rowURL.setParameter("struts_action", "/wiki/view_page");
     		}
     		else {
     			rowURL.setParameter("struts_action", "/wiki/view");
     		}
     
     		rowURL.setParameter("redirect", currentURL);
     		rowURL.setParameter("nodeName", curWikiPage.getNode().getName());
     	}
     	else {
     		rowURL.setParameter("struts_action", "/wiki/edit_page");
     		rowURL.setParameter("redirect", currentURL);
     		rowURL.setParameter("nodeId", String.valueOf(curWikiPage.getNodeId()));
     	}
     
     	rowURL.setParameter("title", HtmlUtil.unescape(curWikiPage.getTitle()));
     
     	if (type.equals("history")) {
     		rowURL.setParameter("version", String.valueOf(curWikiPage.getVersion()));
     	}
     
     	// Title
     
     	row.addText(curWikiPage.getTitle(), rowURL);
     
     	// Status
     
     	row.addStatus(curWikiPage.getStatus(), curWikiPage.getStatusByUserId(), curWikiPage.getStatusDate(), rowURL);
     
     	// Revision
     
     	if (!curWikiPage.isNew()) {
     		String revision = String.valueOf(curWikiPage.getVersion());
     
     		if (curWikiPage.isMinorEdit()) {
     			revision += " (" + LanguageUtil.get(request, "minor-edit") + ")";
     		}
     
     		row.addText(revision, rowURL);
     	}
     	else {
     		row.addText(StringPool.BLANK);
     	}
     
     	// User
     
     	if (!curWikiPage.isNew()) {
     		row.addText(PortalUtil.getUserName(curWikiPage), rowURL);
     	}
     	else {
     		row.addText(StringPool.BLANK);
     	}
     
     	// Date
     
     	if (!curWikiPage.isNew()) {
     		row.addDate(curWikiPage.getCreateDate(), rowURL);
     	}
     	else {
     		row.addText(StringPool.BLANK);
     	}
     
     	// Summary
     
     	if (type.equals("history") || type.equals("recent_changes")) {
     		if (Validator.isNotNull(curWikiPage.getSummary())) {
     			row.addText(curWikiPage.getSummary());
     		}
     		else {
     			row.addText(StringPool.BLANK);
     		}
     	}
     
     	// Action
     
     	if (type.equals("history")) {
     		if (curWikiPage.isHead()) {
     			row.addText(StringPool.BLANK);
     		}
     		else {
     			row.addJSP("/html/portlet/wiki/page_history_action.jsp", "entry-action");
     		}
     	}
     
     	if (type.equals("all_pages") || type.equals("categorized_pages") || type.equals("draft_pages") || type.equals("orphan_pages") || type.equals("recent_changes") || type.equals("tagged_pages")) {
     		row.addJSP("/html/portlet/wiki/page_action.jsp", "entry-action");
     	}
     
     	// Add result row
     
     	resultRows.add(row);
     }
     









response.write( true )+response.write(request.getAttribute(" true "));

   response.write( currentURL )+response.write(request.getAttribute(" currentURL "));
 response.write( String.valueOf(node.getNodeId()) )+response.write(request.getAttribute(" String").valueOf(node.getNodeId()) );
response.write( StringPool.BLANK )+response.write(request.getAttribute(" StringPool").BLANK );









       response.write( portletURL );


response.write( type.equals("history") ? false : true );       response.write( searchContainer );







     			WikiPage latestWikiPage = (WikiPage)results.get(1);
     			











  response.write(currentURL)+response.write(request.getAttribute("currentURL"));

  response.write(String.getValueOf(node().getNodeId()))+response.write(request.getAttribute("String").getValueOf(node().getNodeId()));
  response.write(wikiPage.getTitle());



   response.write( compareVersionURL )+response.write(request.getAttribute(" compareVersionURL "));







   response.write( latestWikiPage.getVersion() )+response.write(request.getAttribute(" latestWikiPage").getVersion() );
   response.write( wikiPage.getVersion() );
}

}
